openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /users/:
    get:
      operationId: listUsers
      description: ''
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
          description: ''
      tags:
      - users
    post:
      operationId: createUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - users
  /users/{id}:
    get:
      operationId: retrieveUser
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - users
  /shelters/{id}/questions:
    get:
      operationId: listShelterQuestions
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShelterQuestion'
          description: ''
      tags:
      - shelters
    post:
      operationId: createShelterQuestion
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShelterQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShelterQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ShelterQuestion'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShelterQuestion'
          description: ''
      tags:
      - shelters
  /shelters/{id}/questions/{question_id}:
    get:
      operationId: retrieveShelterQuestion
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: question_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShelterQuestion'
          description: ''
      tags:
      - shelters
    put:
      operationId: updateShelterQuestion
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: question_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShelterQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShelterQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ShelterQuestion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShelterQuestion'
          description: ''
      tags:
      - shelters
    patch:
      operationId: partialUpdateShelterQuestion
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: question_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShelterQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShelterQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ShelterQuestion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShelterQuestion'
          description: ''
      tags:
      - shelters
    delete:
      operationId: destroyShelterQuestion
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: question_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - shelters
  /shelters/{id}/listings/{listing_id}/questions:
    get:
      operationId: listAssignedQuestions
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssignedQuestion'
          description: ''
      tags:
      - shelters
    post:
      operationId: createAssignedQuestion
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignedQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssignedQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssignedQuestion'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedQuestion'
          description: ''
      tags:
      - shelters
  /shelters/{id}/listings/{listing_id}/applications/{application_id}:
    get:
      operationId: retrievePetApplication
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: application_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetApplication'
          description: ''
      tags:
      - shelters
    put:
      operationId: updatePetApplication
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: application_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetApplication'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetApplication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PetApplication'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetApplication'
          description: ''
      tags:
      - shelters
    patch:
      operationId: partialUpdatePetApplication
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: application_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetApplication'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetApplication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PetApplication'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetApplication'
          description: ''
      tags:
      - shelters
  /shelters/{id}/listings/{listing_id}/applications:
    get:
      operationId: listPetApplications
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: status
        required: false
        in: query
        description: status
        schema:
          type: string
          enum:
          - pending
          - accepted
          - denied
          - withdrawn
          - approved
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/PetApplication'
          description: ''
      tags:
      - shelters
    post:
      operationId: createPetApplication
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetApplication'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetApplication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PetApplication'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetApplication'
          description: ''
      tags:
      - shelters
  /shelters/{id}/listings:
    get:
      operationId: listPetListings
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this pet listing.
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/PetListing'
          description: ''
      tags:
      - shelters
    post:
      operationId: createPetListing
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this pet listing.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetListing'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetListing'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PetListing'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetListing'
          description: ''
      tags:
      - shelters
  /shelters/{id}/listings/{listing_id}:

    get:
      operationId: retrievePetListing
      description: ''
      summary: "Get listing details"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this pet listing.
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetListing'
          description: ''
      tags:
      - shelters
    put:
      operationId: updatePetListing
      description: ''
      summary: 'Update a listing'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this pet listing.
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetListing'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetListing'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PetListing'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetListing'
          description: ''
      tags:
      - shelters
    patch:
      operationId: partialUpdatePetListing
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this pet listing.
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetListing'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetListing'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PetListing'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetListing'
          description: ''
      tags:
      - shelters
    delete:
      operationId: destroyPetListing
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this pet listing.
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - shelters
  /shelters/:
    get:
      operationId: listShelters
      description: ''
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shelter'
          description: ''
      tags:
      - shelters
    post:
      operationId: createShelter
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shelter'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Shelter'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Shelter'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shelter'
          description: ''
      tags:
      - shelters
  /api/token/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
      tags:
      - api
  /api/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
      tags:
      - api
  /shelters/{id}/listings/{listing_id}/questions/{question_id}:
    delete:
      operationId: destroyAssignedQuestion
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: listing_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: question_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - shelters
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        is_shelter:
          type: boolean
          writeOnly: true
      required:
      - username
      - password
      - is_shelter
    ShelterQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question:
          type: string
          maxLength: 1000
        type:
          enum:
          - FILE
          - CHECKBOX
          - DATE
          - EMAIL
          - TEXT
          - NUMBER
          type: string
        required:
          type: boolean
      required:
      - question
    AssignedQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question:
          type: integer
        rank:
          type: integer
      required:
      - question
    PetApplication:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        application_responses:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                readOnly: true
              answer:
                type: string
                maxLength: 3000
              question:
                type: integer
              application:
                type: integer
            required:
            - answer
            - question
            - application
          readOnly: true
        applicant:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            username:
              type: string
              description: Required. 150 characters or fewer. Letters, digits and
                @/./+/-/_ only.
              pattern: ^[\w.@+-]+\z
              maxLength: 150
            password:
              type: string
              writeOnly: true
              maxLength: 128
            is_shelter:
              type: boolean
              writeOnly: true
          required:
          - username
          - password
          - is_shelter
          readOnly: true
        status:
          enum:
          - pending
          - accepted
          - denied
          - withdrawn
          - approved
          type: string
        application_time:
          type: string
          format: date-time
          readOnly: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        listing:
          type: integer
    PetListing:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        assigned_questions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                readOnly: true
              question:
                type: integer
              rank:
                type: integer
            required:
            - question
        name:
          type: string
          maxLength: 200
        status:
          enum:
          - available
          - not_available
          type: string
        shelter:
          type: integer
      required:
      - name
      - shelter
    Shelter:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        owner:
          type: integer
      required:
      - owner
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
